// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

// Addresses formatted as 15-bit binary: 
// RAM addresses:    000000000000000 to 011111111111111
// Screen addresses: 100000000000000 to 101111111111111
// Keyboard address: 110000000000000

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Check if RAM address and/or load asserted
    Not(in=address[14], out=ramtest); 	
    And(a=ramtest, b=load, out=ramload);

    // Check if Screen address and/or load asserted
    Not(in=address[13], out=prescreentest);
    And(a=address[14], b=prescreentest, out=screentest); 
    And(a=screentest, b=load, out=screenload);

    // Connections for all three memory locations
    RAM16K(in=in, load=ramload, address=address[0..13], out=ramout);
    Screen(in=in, load=screenload, address=address[0..12], out=screenout);
    Keyboard(out=keyout);
  
    // Select output based on RAM/Screen/Keyboard address
    Mux16(a=keyout, b=screenout, sel=screentest, out=first);
    Mux16(a=first, b=ramout, sel=ramtest, out=out);
}
