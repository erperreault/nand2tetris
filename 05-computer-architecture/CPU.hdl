// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press. 
// File name: projects/05/CPU.hdl
/** 
 * The Hack CPU (Central Processing unit), consisting of an ALU, 
 * two registers named A and D, and a program counter named PC.  
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

// 16-bit instruction decoding:
// ixxaccccccdddjjj
// i xx a cccccc ddd jjj
// i[15] xx[13..14] a[12] cccccc[6..11] ddd[3..5] jjj[0..2]
// i : 0 for A-instruction, 1 for C-instruction
// x : unused
// a : for C-instruction, take A(0) or M(1) as input
// c : set ALU function
// d : set destination register for ALU output
// j : set jump condition

    PARTS:
    // A Register
    Not(in=instruction[15], out=loadAinstruction);	// Check for A instruction
    And(a=instruction[15], b=instruction[5], 		// --or-- C instruction and A destination
	out=loadAfromALU); 
    Or(a=loadAinstruction, b=loadAfromALU, 		// (either case loads A)
	out=loadA); 		
    Mux16(a=instruction, b=ALUoutput, 
	sel=loadAfromALU, out=ARegisterIn);		// get correct input for A register

    ARegister(in=ARegisterIn, load=loadA, 
	out=ARegisterOut, out[0..14]=addressM);
   
    Mux16(a=ARegisterOut, b=inM, sel=instruction[12],   // Send either A or M to ALU
	out=AorMout);	

    // D Register 
    And(a=instruction[15], b=instruction[4], 		// Check for C instruction and D destination
	out=loadD);		
    DRegister(in=ALUoutput, load=loadD, 
	out=DRegisterOut);	
    
    // The ALU itself
    ALU(x=DRegisterOut, y=AorMout, 			// These are hard-coded from Project 2
        zx=instruction[11], 
        nx=instruction[10], 
        zy=instruction[9], 
        ny=instruction[8], 
        f=instruction[7], 
        no=instruction[6],
        out=outM, out=ALUoutput, 
	zr=zeroOut, ng=negativeOut);

    And(a=instruction[15], b=instruction[3], 		// Check for M destination
	out=writeM);

    // Program Counter
    Or(a=zeroOut, b=negativeOut, out=notPositive);	// Save some space with a positive flag
    Not(in=notPositive, out=positiveOut);		// (complements zero and negative flags)

    And(a=instruction[0], b=positiveOut, out=jgt);	// Check for correct flag and condition met
    And(a=instruction[1], b=zeroOut, out=jeq);    
    And(a=instruction[2], b=negativeOut, out=jlt);

    Or(a=jgt, b=jeq, out=jge);				// No need for new logic
    Or(a=jlt, b=jeq, out=jle);				// jmp and jne are already covered by implication
    Or(a=jge, b=jle, out=mightJump);			// Still need to check if C instruction

    And(a=mightJump, b=instruction[15], out=jump);	// i[15] signals C instruction
    Not(in=jump, out=increment);			// One or the other always

    PC(in=ARegisterOut, load=jump, inc=increment, 
	reset=reset, out[0..14]=pc);
}
